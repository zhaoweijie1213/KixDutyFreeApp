@page "/account"
@using KixDutyFree.Shared.Models.Entity
@using KixDutyFree.Shared.Services
@inject AccountService accountService;

<PageTitle>账号列表</PageTitle>
<MContainer Fluid>
    <MDataTable Stripe Headers="_headers"
    Loading="@Loading"
    Items="Accounts"
    ItemsPerPage="20"
    Class="elevation-1">
        <TopContent>
            <MToolbar>
                <MToolbarTitle>账号管理</MToolbarTitle>
                <MDivider Class="mx-4"
                Inset
                Vertical></MDivider>
                <MSpacer></MSpacer>
                <MButton Color="primary"
                Dark
                Class="mb-2"
                OnClick="()=>_dialog=true">
                    新增账号
                </MButton>
            </MToolbar>
        </TopContent>
        <ItemColContent>
            @if (context.Header.Value == "actions")
            {
                <MIcon Small
                Class="mr-2"
                OnClick="()=>EditItem(context.Item)">mdi-pencil</MIcon>
                <MIcon Small
                OnClick="()=>DeleteItem(context.Item.Email)">mdi-delete</MIcon>
            }
            else
            {
                @context.Value
            }
        </ItemColContent>
    </MDataTable>
</MContainer>


@code {
    private List<DataTableHeader<AccountEntity>> _headers = new List<DataTableHeader<AccountEntity>>
        {
          new (){ Text= "邮箱",Align= DataTableHeaderAlign.Center, Value= nameof(AccountEntity.Email)},
          new (){ Text= "航空公司", Align= DataTableHeaderAlign.Center, Value= nameof(AccountEntity.AirlineName)},
          new (){ Text= "航班号",Align= DataTableHeaderAlign.Center, Value= nameof(AccountEntity.FlightNo)},
          new (){ Text= "航班时间",Align= DataTableHeaderAlign.Center,Value= nameof(AccountEntity.Date)},
          new (){ Text= "默认下单数量",Align= DataTableHeaderAlign.Center,Value= nameof(AccountEntity.Quantity) },
          new (){ Text= "操作", Value= "actions",Sortable=false }
        };

    private List<AccountEntity> Accounts { get; set; } = new();

    private bool Loading = true;

    private bool _dialog;

    private bool _dialogDelete;

    protected override async Task OnInitializedAsync()
    {
        Accounts = await accountService.GetAccountAsync();

        Loading = false;
    }

    public void EditItem(AccountEntity item)
    {

    }

    public void DeleteItem(string email)
    {
   
    }
}
