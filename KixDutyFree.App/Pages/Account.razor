@page "/account"
@using KixDutyFree.App.Models
@using KixDutyFree.Shared.Models
@using KixDutyFree.Shared.Models.Entity
@using KixDutyFree.Shared.Services
@using Mapster
@inject AccountService accountService;
@implements IDisposable

<PageTitle>账号列表</PageTitle>
<MContainer Fluid>
    <MDataTable Stripe Headers="_headers"
    Loading="@Loading"
    Items="Accounts"
    ItemsPerPage="20"
    Class="elevation-1">
        <TopContent>
            <MToolbar>
                <MToolbarTitle>账号管理</MToolbarTitle>
                <MDivider Class="mx-4"
                Inset
                Vertical></MDivider>
                <MSpacer></MSpacer>
                <MButton Color="primary"
                Dark
                Class="mb-2"
                OnClick="()=>_dialog=true">
                    新增账号
                </MButton>
                <MDialog @bind-Value="_dialog"
                MaxWidth="700">
                    <MCard>
                        <MCardTitle>
                            <span class="text-h5">@FormTitle</span>
                        </MCardTitle>

                        <MCardText>
                            <MContainer>
                                <MRow>
                                    <MCol Cols="12" Sm="6" Md="4">
                                        <MTextField @bind-Value="_editedItem.Email" Label="邮箱"></MTextField>
                                    </MCol>
                                    <MCol Cols="12" Sm="6" Md="4">
                                        <MTextField @bind-Value="_editedItem.Password" Label="密码"></MTextField>
                                    </MCol>
                                    <MCol Cols="12" Sm="6" Md="4">
                                        <MTextField @bind-Value="_editedItem.Date" Hint="例如: 2024/12/11 10:30" Label="航班时间">@_editedItem.Date.ToString("yyyy-MM-dd HH:mm")</MTextField>
                                    </MCol>
                                    <MCol Cols="12" Sm="6" Md="4">
                                        <MTextField @bind-Value="_editedItem.AirlineName" Label="航空公司名称" Hint="例如:四川航空"></MTextField>
                                    </MCol>
                                    <MCol Cols="12" Sm="6" Md="4"> 
                                        <MTextField @bind-Value="_editedItem.FlightNo" Label="航班号"></MTextField>
                                    </MCol>
                                    <MCol Cols="12" Sm="6" Md="4">
                                        <MTextField @bind-Value="_editedItem.Quantity" Label="默认下单数量" Hint="设置后优先使用该值下单,不设置则使用商品设置的下单数量"></MTextField>
                                    </MCol>
                                </MRow>
                            </MContainer>
                        </MCardText>

                        <MCardActions>
                            <MSpacer></MSpacer>
                            <MButton Color="blue darken-1"
                            Text
                            OnClick="Save">
                                保存
                            </MButton>
                            <MButton Color="blue darken-1"
                            Text
                            OnClick="Close">
                                取消
                            </MButton>
                        </MCardActions>
                    </MCard>
                </MDialog>
                <MDialog @bind-Value="_dialogDelete" MaxWidth="600">
                    <MCard>
                        <MCardTitle>提示</MCardTitle>
                        <MCardText>确认删除该账号吗?</MCardText>
                        <MCardActions>
                            <MSpacer></MSpacer>
                            <MButton Color="blue darken-1" Text OnClick="DeleteItemConfirm">确认</MButton>
                            <MButton Color="blue darken-1" Text OnClick="CloseDelete">取消</MButton>
                        </MCardActions>
                    </MCard>
                </MDialog>
            </MToolbar>
        </TopContent>
        <ItemColContent>
            @if (context.Header.Value == "actions")
            {
                <MIcon Small
                Class="mr-2"
                OnClick="()=>EditItem(context.Item)">mdi-pencil</MIcon>
                <MIcon Small
                OnClick="()=>DeleteItem(context.Item.Email)">mdi-delete</MIcon>
            }
            else if (context.Header.Value == nameof(AccountInfo.IsLogin))
            {
                if (context.Item.IsLogin)
                {
                    <div text-center><MIcon Color="success">mdi-check-circle</MIcon>已登录</div>
                }
                else
                {
                    <div text-center><MIcon Color="warning">mdi-close-circle</MIcon>未登录</div>
                }
            }
            else
            {
                @context.Value
            }
        </ItemColContent>
    </MDataTable>
</MContainer>


@code {
    private List<DataTableHeader<AccountInfo>> _headers = new List<DataTableHeader<AccountInfo>>
        {
          new (){ Text= "邮箱",Align= DataTableHeaderAlign.Center, Value= nameof(AccountInfo.Email)},
          new (){ Text= "航空公司", Align= DataTableHeaderAlign.Center, Value= nameof(AccountInfo.AirlineName)},
          new (){ Text= "航班号",Align= DataTableHeaderAlign.Center, Value= nameof(AccountInfo.FlightNo)},
          new (){ Text= "航班时间",Align= DataTableHeaderAlign.Center,Value= nameof(AccountInfo.Date)},
          new (){ Text= "是否登录",Align= DataTableHeaderAlign.Center,Value= nameof(AccountInfo.IsLogin)},
          new (){ Text= "默认下单数量",Align= DataTableHeaderAlign.Center,Value= nameof(AccountInfo.Quantity) },
          new (){ Text= "操作", Value= "actions",Sortable=false }
        };

    private List<AccountInfo> Accounts { get; set; } = new();

    private bool Loading = true;

    private bool _dialog;

    private bool _dialogDelete;


    private AccountEntity _editedItem { get; set; } = new();

    private string Email = string.Empty;

    public string FormTitle
    {
        get
        {
            if (!string.IsNullOrEmpty(Email))
            {
                return "编辑";
            }
            else
            {
                return "新增";
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        Accounts = await accountService.GetAccountInfoAsync();
        accountService.OnChange += HandleLoadingChange;
        Loading = false;
    }

    private void HandleLoadingChange()
    {
        Accounts = accountService.Accounts;
        InvokeAsync(StateHasChanged);
    }

    public void Close()
    {
        _dialog = false;
        _editedItem = new AccountEntity();
        Email = string.Empty;
    }

    public async void Save()
    {
        if (!string.IsNullOrEmpty(Email))
        {
            await accountService.UpdateAccountAsync(_editedItem);
        }
        else
        {
            await accountService.AddAccountAsync(_editedItem);
        }
        Close();
    }

    public void EditItem(AccountInfo item)
    {
        Email = item.Email;
        _editedItem = item.Adapt<AccountEntity>();
        _dialog = true;
    }

    public void DeleteItem(string email)
    {
        Email = email;
        _dialogDelete = true;
    }

    public async Task DeleteItemConfirm()
    {
        await accountService.DelAccountAsync(Email);
        CloseDelete();
    }

    public void CloseDelete()
    {
        _dialogDelete = false;
        _editedItem = new();
        Email = string.Empty;
    }

    public void Dispose()
    {
        // 取消订阅，防止内存泄漏
        accountService.OnChange -= HandleLoadingChange;
    }
}
