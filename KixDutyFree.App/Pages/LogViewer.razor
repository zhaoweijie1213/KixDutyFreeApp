@page "/logs"
@using KixDutyFree.App.Service
@using Serilog.Events
@inject LogStore LogStore
@inject IJSRuntime JSRuntime
@implements IDisposable

<PageTitle>日志</PageTitle>

<MContainer Fluid>
    <MDataTable Id="logViewTable" Stripe Loading="@Loading" Items="logEvents" Headers="_headers" Page="@_page"
    ItemsPerPage="@_itemsPerPage" 
    OnOptionsUpdate="@HandleOnOptionsUpdate"
    ServerItemsLength="@_total" Class="elevation-1">
        <TopContent>
            <MToolbar>
                <MToolbarTitle>日志列表</MToolbarTitle>
            </MToolbar>
        </TopContent>
        <ItemColContent>
            @if (context.Header.Value == "Level")
            {
                switch (context.Item.Level)
                {
                    case LogEventLevel.Information:
                        <MChip Class="ma-2" Color="success" Label>
                            @context.Item.Level
                        </MChip>
                        break;
                    case LogEventLevel.Warning:
                        <MChip Class="ma-2"
                        Color="warning"
                        Label>
                            @context.Item.Level
                        </MChip>
                        break;
                    case LogEventLevel.Error:
                        <MChip Class="ma-2"
                        Color="error"
                        Label>
                            @context.Item.Level
                        </MChip>
                        break;
                    default:
                        <MChip Class="ma-2"
                        Label>
                            @context.Item.Level
                        </MChip>
                        break;
                }
            }
            else
            {
                @context.Value
            }
        </ItemColContent>
    </MDataTable>
</MContainer>
@code {
    private List<LogEvent> logEvents = new();

    private ElementReference scrollContainer;

    private System.Threading.Timer? _timer;

    private int _total;

    private int _itemsPerPage = 50;

    private int _page = 1;

    private DataOptions _options = new(1, 50);

    private bool Loading = false;

    private string height = "100%";

    private readonly TimeSpan _refreshInterval = TimeSpan.FromSeconds(2); // 设置刷新间隔

    private List<DataTableHeader<LogEvent>> _headers = new List<DataTableHeader<LogEvent>>
        {
          new (){ Text= "时间",Align= DataTableHeaderAlign.Center, Value= "Timestamp",Width = 220, CellRender = dessert => dessert.Timestamp.ToLocalTime().ToString("yyyy-MM-dd HH:mm:ss:fff"),Fixed = DataTableFixed.Left},
          new (){ Text= "级别", Align= DataTableHeaderAlign.Center, Value= "Level",Width = 220,Fixed = DataTableFixed.Left},
          new (){ Text= "消息",Align= DataTableHeaderAlign.Center, Value= "Message",CellRender =  dessert => dessert.RenderMessage()},
          new (){
              Text= "异常",
              Align= DataTableHeaderAlign.Center,
              Value= "Exception",
              CellRender = dessert => dessert.Exception?.ToString() ?? "-"}
        };

    protected override void OnInitialized()
    {
        // // 初始加载日志
        // LoadLogEvents();
        // 设置定时器
        _timer = new System.Threading.Timer(_ =>
        {
            LoadLogEvents(_page, _itemsPerPage);

        }, null, TimeSpan.Zero, _refreshInterval);
    }

    private void HandleOnOptionsUpdate(DataOptions options)
    {
        _options = options;
        _page = options.Page;
        _itemsPerPage = _options.ItemsPerPage;
        LoadLogEvents(_options.Page, _options.ItemsPerPage);
    }


    private void LoadLogEvents(int pageNum, int pageSize)
    {
        Loading = true;
        // 获取并排序日志事件
        var data = LogStore.GetLogEvents(pageNum, pageSize);
        logEvents = data.List;
        _total = data.Total;
        // 更新 UI 并滚动到最底部
        InvokeAsync(() =>
       {
           StateHasChanged();
       });
        Loading = false;
    }

    public void Dispose()
    {
        // 停止并释放定时器
        _timer?.Dispose();
    }
}
