@page "/logs"
@using KixDutyFree.App.Service
@using Serilog.Events
@inject LogStore LogStore
@inject IJSRuntime JSRuntime
@implements IDisposable

<PageTitle>日志</PageTitle>

<MContainer Fluid>
    <MCard>
        <MCardTitle>日志</MCardTitle>
        <MCardText>
            <div class="log-console" @ref="scrollContainer">
                @foreach (var item in logEvents.OrderBy(e => e.Timestamp))
                {
                    <div class="@GetLevelClass(item.Level)">
                        [@item.Timestamp.ToLocalTime().ToString("yyyy-MM-dd HH:mm:ss:fff")] @item.Level - @item.RenderMessage()
                        @if (item.Exception != null)
                        {
                            <br />
                            @item.Exception
                        }
                    </div>
                }
            </div>
        </MCardText>
    </MCard>
</MContainer>

<style>
    .log-console {
        min-height: 75vh;
        overflow-y: auto;
        font-family: monospace;
        font-size: 0.875rem;
        background-color: #272822;
        color: #e0e0e0;
        padding: 10px;
    }

    .log-info {
        color: #4caf50;
    }

    .log-warning {
        color: #ff9800;
    }

    .log-error {
        color: #f44336;
    }
</style>

@code {
    /// <summary>
    /// 日志事件集合
    /// </summary>
    private List<LogEvent> logEvents = new();

    /// <summary>
    /// 日志容器引用
    /// </summary>
    private ElementReference scrollContainer;

    /// <summary>
    /// 定时器用于定时刷新日志
    /// </summary>
    private System.Threading.Timer? _timer;

    /// <summary>
    /// 刷新时间间隔
    /// </summary>
    private readonly TimeSpan _refreshInterval = TimeSpan.FromSeconds(2);

    /// <summary>
    /// 初始化设置定时器
    /// </summary>
    protected override void OnInitialized()
    {
        _timer = new System.Threading.Timer(_ =>
        {
            LoadLogEvents();
        }, null, TimeSpan.Zero, _refreshInterval);
    }

    /// <summary>
    /// 加载日志并滚动到底部
    /// </summary>
    private void LoadLogEvents()
    {
        var data = LogStore.GetLogEvents(1, 500);
        logEvents = data.List.OrderBy(e => e.Timestamp).ToList();
        InvokeAsync(async () =>
        {
            StateHasChanged();
            await JSRuntime.InvokeVoidAsync("scrollToBottom", scrollContainer);
        });
    }

    /// <summary>
    /// 获取日志级别样式
    /// </summary>
    /// <param name="level">日志级别</param>
    /// <returns>样式名称</returns>
    private string GetLevelClass(LogEventLevel level)
    {
        return level switch
        {
            LogEventLevel.Information => "log-info",
            LogEventLevel.Warning => "log-warning",
            LogEventLevel.Error => "log-error",
            _ => string.Empty
        };
    }

    /// <summary>
    /// 释放定时器
    /// </summary>
    public void Dispose()
    {
        _timer?.Dispose();
    }
}
